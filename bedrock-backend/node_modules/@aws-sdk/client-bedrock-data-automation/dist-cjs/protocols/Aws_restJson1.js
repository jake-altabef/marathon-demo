"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_UpdateDataAutomationProjectCommand = exports.de_UpdateBlueprintCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_ListTagsForResourceCommand = exports.de_ListDataAutomationProjectsCommand = exports.de_ListBlueprintsCommand = exports.de_GetDataAutomationProjectCommand = exports.de_GetBlueprintCommand = exports.de_DeleteDataAutomationProjectCommand = exports.de_DeleteBlueprintCommand = exports.de_CreateDataAutomationProjectCommand = exports.de_CreateBlueprintVersionCommand = exports.de_CreateBlueprintCommand = exports.se_UpdateDataAutomationProjectCommand = exports.se_UpdateBlueprintCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_ListTagsForResourceCommand = exports.se_ListDataAutomationProjectsCommand = exports.se_ListBlueprintsCommand = exports.se_GetDataAutomationProjectCommand = exports.se_GetBlueprintCommand = exports.se_DeleteDataAutomationProjectCommand = exports.se_DeleteBlueprintCommand = exports.se_CreateDataAutomationProjectCommand = exports.se_CreateBlueprintVersionCommand = exports.se_CreateBlueprintCommand = void 0;
const core_1 = require("@aws-sdk/core");
const core_2 = require("@smithy/core");
const smithy_client_1 = require("@smithy/smithy-client");
const uuid_1 = require("uuid");
const BedrockDataAutomationServiceException_1 = require("../models/BedrockDataAutomationServiceException");
const models_0_1 = require("../models/models_0");
const se_CreateBlueprintCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/blueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        blueprintName: [],
        blueprintStage: [],
        clientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        encryptionConfiguration: (_) => (0, smithy_client_1._json)(_),
        schema: [],
        tags: (_) => (0, smithy_client_1._json)(_),
        type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
exports.se_CreateBlueprintCommand = se_CreateBlueprintCommand;
const se_CreateBlueprintVersionCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/blueprints/{blueprintArn}/versions");
    b.p("blueprintArn", () => input.blueprintArn, "{blueprintArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateBlueprintVersionCommand = se_CreateBlueprintVersionCommand;
const se_CreateDataAutomationProjectCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/data-automation-projects");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        customOutputConfiguration: (_) => (0, smithy_client_1._json)(_),
        encryptionConfiguration: (_) => (0, smithy_client_1._json)(_),
        overrideConfiguration: (_) => (0, smithy_client_1._json)(_),
        projectDescription: [],
        projectName: [],
        projectStage: [],
        standardOutputConfiguration: (_) => (0, smithy_client_1._json)(_),
        tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
exports.se_CreateDataAutomationProjectCommand = se_CreateDataAutomationProjectCommand;
const se_DeleteBlueprintCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/blueprints/{blueprintArn}");
    b.p("blueprintArn", () => input.blueprintArn, "{blueprintArn}", false);
    const query = (0, smithy_client_1.map)({
        [_bV]: [, input[_bV]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
exports.se_DeleteBlueprintCommand = se_DeleteBlueprintCommand;
const se_DeleteDataAutomationProjectCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/data-automation-projects/{projectArn}");
    b.p("projectArn", () => input.projectArn, "{projectArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DeleteDataAutomationProjectCommand = se_DeleteDataAutomationProjectCommand;
const se_GetBlueprintCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/blueprints/{blueprintArn}");
    b.p("blueprintArn", () => input.blueprintArn, "{blueprintArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        blueprintStage: [],
        blueprintVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetBlueprintCommand = se_GetBlueprintCommand;
const se_GetDataAutomationProjectCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/data-automation-projects/{projectArn}");
    b.p("projectArn", () => input.projectArn, "{projectArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        projectStage: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetDataAutomationProjectCommand = se_GetDataAutomationProjectCommand;
const se_ListBlueprintsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/blueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        blueprintArn: [],
        blueprintStageFilter: [],
        maxResults: [],
        nextToken: [],
        projectFilter: (_) => (0, smithy_client_1._json)(_),
        resourceOwner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_ListBlueprintsCommand = se_ListBlueprintsCommand;
const se_ListDataAutomationProjectsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/data-automation-projects");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        blueprintFilter: (_) => (0, smithy_client_1._json)(_),
        maxResults: [],
        nextToken: [],
        projectStageFilter: [],
        resourceOwner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_ListDataAutomationProjectsCommand = se_ListDataAutomationProjectsCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        resourceARN: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_TagResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        resourceARN: [],
        tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/untagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        resourceARN: [],
        tagKeys: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateBlueprintCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/blueprints/{blueprintArn}");
    b.p("blueprintArn", () => input.blueprintArn, "{blueprintArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        blueprintStage: [],
        encryptionConfiguration: (_) => (0, smithy_client_1._json)(_),
        schema: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
exports.se_UpdateBlueprintCommand = se_UpdateBlueprintCommand;
const se_UpdateDataAutomationProjectCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/data-automation-projects/{projectArn}");
    b.p("projectArn", () => input.projectArn, "{projectArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        customOutputConfiguration: (_) => (0, smithy_client_1._json)(_),
        encryptionConfiguration: (_) => (0, smithy_client_1._json)(_),
        overrideConfiguration: (_) => (0, smithy_client_1._json)(_),
        projectDescription: [],
        projectStage: [],
        standardOutputConfiguration: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
exports.se_UpdateDataAutomationProjectCommand = se_UpdateDataAutomationProjectCommand;
const de_CreateBlueprintCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        blueprint: (_) => de_Blueprint(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateBlueprintCommand = de_CreateBlueprintCommand;
const de_CreateBlueprintVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        blueprint: (_) => de_Blueprint(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateBlueprintVersionCommand = de_CreateBlueprintVersionCommand;
const de_CreateDataAutomationProjectCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        projectArn: smithy_client_1.expectString,
        projectStage: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateDataAutomationProjectCommand = de_CreateDataAutomationProjectCommand;
const de_DeleteBlueprintCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteBlueprintCommand = de_DeleteBlueprintCommand;
const de_DeleteDataAutomationProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        projectArn: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeleteDataAutomationProjectCommand = de_DeleteDataAutomationProjectCommand;
const de_GetBlueprintCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        blueprint: (_) => de_Blueprint(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetBlueprintCommand = de_GetBlueprintCommand;
const de_GetDataAutomationProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        project: (_) => de_DataAutomationProject(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetDataAutomationProjectCommand = de_GetDataAutomationProjectCommand;
const de_ListBlueprintsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        blueprints: (_) => de_Blueprints(_, context),
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListBlueprintsCommand = de_ListBlueprintsCommand;
const de_ListDataAutomationProjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        projects: (_) => de_DataAutomationProjectSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListDataAutomationProjectsCommand = de_ListDataAutomationProjectsCommand;
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        tags: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UpdateBlueprintCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        blueprint: (_) => de_Blueprint(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_UpdateBlueprintCommand = de_UpdateBlueprintCommand;
const de_UpdateDataAutomationProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await (0, core_1.parseJsonBody)(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        projectArn: smithy_client_1.expectString,
        projectStage: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_UpdateDataAutomationProjectCommand = de_UpdateDataAutomationProjectCommand;
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0, core_1.parseJsonErrorBody)(output.body, context),
    };
    const errorCode = (0, core_1.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrockdataautomation#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrockdataautomation#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrockdataautomation#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrockdataautomation#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrockdataautomation#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrockdataautomation#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrockdataautomation#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(BedrockDataAutomationServiceException_1.BedrockDataAutomationServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        fieldList: smithy_client_1._json,
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_Blueprint = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        blueprintArn: smithy_client_1.expectString,
        blueprintName: smithy_client_1.expectString,
        blueprintStage: smithy_client_1.expectString,
        blueprintVersion: smithy_client_1.expectString,
        creationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        kmsEncryptionContext: smithy_client_1._json,
        kmsKeyId: smithy_client_1.expectString,
        lastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        schema: smithy_client_1.expectString,
        type: smithy_client_1.expectString,
    });
};
const de_Blueprints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlueprintSummary(entry, context);
    });
    return retVal;
};
const de_BlueprintSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        blueprintArn: smithy_client_1.expectString,
        blueprintName: smithy_client_1.expectString,
        blueprintStage: smithy_client_1.expectString,
        blueprintVersion: smithy_client_1.expectString,
        creationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        lastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_DataAutomationProject = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        creationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        customOutputConfiguration: smithy_client_1._json,
        kmsEncryptionContext: smithy_client_1._json,
        kmsKeyId: smithy_client_1.expectString,
        lastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        overrideConfiguration: smithy_client_1._json,
        projectArn: smithy_client_1.expectString,
        projectDescription: smithy_client_1.expectString,
        projectName: smithy_client_1.expectString,
        projectStage: smithy_client_1.expectString,
        standardOutputConfiguration: smithy_client_1._json,
        status: smithy_client_1.expectString,
    });
};
const de_DataAutomationProjectSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataAutomationProjectSummary(entry, context);
    });
    return retVal;
};
const de_DataAutomationProjectSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        creationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        projectArn: smithy_client_1.expectString,
        projectName: smithy_client_1.expectString,
        projectStage: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const _bV = "blueprintVersion";
